const t=JSON.parse('{"key":"v-5c9d96aa","path":"/c/order-2.html","title":"顺序程序设计（2）","lang":"zh-CN","frontmatter":{"title":"顺序程序设计（2）","date":"2022-07-30T00:00:00.000Z","icon":"code","order":8,"description":"19.字符型数据 字符型是以整型形式(ASCII码)存放在内存单元中。ASCII共128个字符(也就是最多可以用7位数表示) 类型 字符值 取值范围 signed char 1 -128~127 unsigned char 1 0~255","head":[["meta",{"property":"og:url","content":"https://passwordgloo-github-io.vercel.app/c/order-2.html"}],["meta",{"property":"og:site_name","content":"麦田守望者文档库"}],["meta",{"property":"og:title","content":"顺序程序设计（2）"}],["meta",{"property":"og:description","content":"19.字符型数据 字符型是以整型形式(ASCII码)存放在内存单元中。ASCII共128个字符(也就是最多可以用7位数表示) 类型 字符值 取值范围 signed char 1 -128~127 unsigned char 1 0~255"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"zh-TW"}],["meta",{"property":"article:published_time","content":"2022-07-30T00:00:00.000Z"}],["link",{"rel":"alternate","hreflang":"zh-tw","href":"https://passwordgloo-github-io.vercel.app/tw/c/order-2.html"}]]},"headers":[{"level":2,"title":"19.字符型数据","slug":"_19-字符型数据","link":"#_19-字符型数据","children":[]},{"level":2,"title":"20.getchar与putchar函数","slug":"_20-getchar与putchar函数","link":"#_20-getchar与putchar函数","children":[]},{"level":2,"title":"21.浮点型数据","slug":"_21-浮点型数据","link":"#_21-浮点型数据","children":[]},{"level":2,"title":"22.printf格式附加字符","slug":"_22-printf格式附加字符","link":"#_22-printf格式附加字符","children":[]},{"level":2,"title":"23.1scanf函数注意事项(2)","slug":"_23-1scanf函数注意事项-2","link":"#_23-1scanf函数注意事项-2","children":[]},{"level":2,"title":"23.2运算符(2)","slug":"_23-2运算符-2","link":"#_23-2运算符-2","children":[]}],"git":{},"readingTime":{"minutes":2.55,"words":765},"filePathRelative":"c/order-2.md","localizedDate":"2022年7月30日","excerpt":"<h2> 19.字符型数据</h2>\\n<blockquote>\\n<p>字符型是以整型形式(ASCII码)存放在内存单元中。ASCII共128个字符(也就是最多可以用7位数表示)</p>\\n</blockquote>\\n<table>\\n<thead>\\n<tr>\\n<th>类型</th>\\n<th>字符值</th>\\n<th>取值范围</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>signed char</td>\\n<td>1</td>\\n<td>-128~127</td>\\n</tr>\\n<tr>\\n<td>unsigned char</td>\\n<td>1</td>\\n<td>0~255</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{t as data};
