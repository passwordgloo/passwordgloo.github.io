const n=JSON.parse('{"key":"v-4968f6b0","path":"/c/design-3.html","title":"程序设计和C语言（3）","lang":"zh-CN","frontmatter":{"title":"程序设计和C语言（3）","date":"2022-07-30T00:00:00.000Z","icon":"code","order":3,"description":"10.初等运算符及单目运算符 优先级、操作数、结合方向--初等运算符优先级为1，单目运算符优先级为2 只有单目运算符和赋值运算符的结合方向是自右往左的 #include &lt;stdio.h&gt; int main() { \\t//概念理解 \\tprintf(\\"%d,%d\\\\n\\",1+2*3,(1+2)*3); \\tint a = 1,b = 2,c = 3; \\tprintf(\\"%d\\\\n\\",a); //学习目标（2） \\t//！逻辑非运算符，求该操作数的逻辑反值，如果该操作数值为真，则整个表达式为假，否则整个表达式值为真 \\tprintf(\\"%d,%d,%d\\\\n\\",!1,!9,!0); //输出0，0，1 \\t \\t//-负号运算符 \\tprintf(\\"%d\\\\n\\",4*-3); //乘号比负号的优先级低，括号可以省略 \\treturn 0; }","head":[["meta",{"property":"og:url","content":"https://passwordgloo-github-io.vercel.app/c/design-3.html"}],["meta",{"property":"og:site_name","content":"麦田守望者文档库"}],["meta",{"property":"og:title","content":"程序设计和C语言（3）"}],["meta",{"property":"og:description","content":"10.初等运算符及单目运算符 优先级、操作数、结合方向--初等运算符优先级为1，单目运算符优先级为2 只有单目运算符和赋值运算符的结合方向是自右往左的 #include &lt;stdio.h&gt; int main() { \\t//概念理解 \\tprintf(\\"%d,%d\\\\n\\",1+2*3,(1+2)*3); \\tint a = 1,b = 2,c = 3; \\tprintf(\\"%d\\\\n\\",a); //学习目标（2） \\t//！逻辑非运算符，求该操作数的逻辑反值，如果该操作数值为真，则整个表达式为假，否则整个表达式值为真 \\tprintf(\\"%d,%d,%d\\\\n\\",!1,!9,!0); //输出0，0，1 \\t \\t//-负号运算符 \\tprintf(\\"%d\\\\n\\",4*-3); //乘号比负号的优先级低，括号可以省略 \\treturn 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"zh-TW"}],["meta",{"property":"article:published_time","content":"2022-07-30T00:00:00.000Z"}],["link",{"rel":"alternate","hreflang":"zh-tw","href":"https://passwordgloo-github-io.vercel.app/tw/c/design-3.html"}]]},"headers":[{"level":2,"title":"10.初等运算符及单目运算符","slug":"_10-初等运算符及单目运算符","link":"#_10-初等运算符及单目运算符","children":[]},{"level":2,"title":"11.算术运算符及赋值运算符","slug":"_11-算术运算符及赋值运算符","link":"#_11-算术运算符及赋值运算符","children":[]},{"level":2,"title":"12.逗号，关系及逻辑运算符","slug":"_12-逗号-关系及逻辑运算符","link":"#_12-逗号-关系及逻辑运算符","children":[]},{"level":2,"title":"13.条件运算符","slug":"_13-条件运算符","link":"#_13-条件运算符","children":[]}],"git":{},"readingTime":{"minutes":4.19,"words":1256},"filePathRelative":"c/design-3.md","localizedDate":"2022年7月30日","excerpt":"<h2> 10.初等运算符及单目运算符</h2>\\n<blockquote>\\n<ol>\\n<li>优先级、操作数、结合方向--初等运算符优先级为1，单目运算符优先级为2</li>\\n<li>只有单目运算符和赋值运算符的结合方向是自右往左的</li>\\n</ol>\\n</blockquote>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">//概念理解</span>\\n\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d,%d\\\\n\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">1</span><span class=\\"token operator\\">+</span><span class=\\"token number\\">2</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">,</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">1</span><span class=\\"token operator\\">+</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">*</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">int</span> a <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span>b <span class=\\"token operator\\">=</span> <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span>c <span class=\\"token operator\\">=</span> <span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\\\n\\"</span><span class=\\"token punctuation\\">,</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>         <span class=\\"token comment\\">//学习目标（2）</span>\\n\\n\\n\\t<span class=\\"token comment\\">//！逻辑非运算符，求该操作数的逻辑反值，如果该操作数值为真，则整个表达式为假，否则整个表达式值为真</span>\\n\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d,%d,%d\\\\n\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">!</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">!</span><span class=\\"token number\\">9</span><span class=\\"token punctuation\\">,</span><span class=\\"token operator\\">!</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">//输出0，0，1</span>\\n\\t\\n\\t<span class=\\"token comment\\">//-负号运算符</span>\\n\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\\\n\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">4</span><span class=\\"token operator\\">*</span><span class=\\"token operator\\">-</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>            <span class=\\"token comment\\">//乘号比负号的优先级低，括号可以省略</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
