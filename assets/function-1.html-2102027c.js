const n=JSON.parse('{"key":"v-5194951e","path":"/tw/c/function-1.html","title":"函數（1）","lang":"zh-TW","frontmatter":{"title":"函數（1）","date":"2022-07-30T00:00:00.000Z","icon":"code","order":13,"description":"51.宏定義 #include &lt;stdio.h&gt; #define A 2 #define B A+A #define C (A+A) #define D(a,b) (a)*(b) int main(void) { \\tprintf(\\"%d,%d,%d\\\\n\\",A,B*B,C*C); \\tprintf(\\"%d\\\\n\\",D(2,2+1)); \\treturn 0; }","head":[["meta",{"property":"og:url","content":"https://passwordgloo-github-io.vercel.app/tw/c/function-1.html"}],["meta",{"property":"og:site_name","content":"麦田守望者文档库"}],["meta",{"property":"og:title","content":"函數（1）"}],["meta",{"property":"og:description","content":"51.宏定義 #include &lt;stdio.h&gt; #define A 2 #define B A+A #define C (A+A) #define D(a,b) (a)*(b) int main(void) { \\tprintf(\\"%d,%d,%d\\\\n\\",A,B*B,C*C); \\tprintf(\\"%d\\\\n\\",D(2,2+1)); \\treturn 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-TW"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2022-07-30T00:00:00.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://passwordgloo-github-io.vercel.app/c/function-1.html"}]]},"headers":[{"level":2,"title":"51.宏定義","slug":"_51-宏定義","link":"#_51-宏定義","children":[]},{"level":2,"title":"52.宏名之間重名","slug":"_52-宏名之間重名","link":"#_52-宏名之間重名","children":[]},{"level":2,"title":"53.undef終止宏的定義域","slug":"_53-undef終止宏的定義域","link":"#_53-undef終止宏的定義域","children":[]},{"level":2,"title":"54.宏名與函數名重名","slug":"_54-宏名與函數名重名","link":"#_54-宏名與函數名重名","children":[]},{"level":2,"title":"55.函數的指針","slug":"_55-函數的指針","link":"#_55-函數的指針","children":[]},{"level":2,"title":"56.auto變量與register","slug":"_56-auto變量與register","link":"#_56-auto變量與register","children":[]}],"git":{},"readingTime":{"minutes":1.55,"words":465},"filePathRelative":"tw/c/function-1.md","localizedDate":"2022年7月30日","excerpt":"<h2> 51.宏定義</h2>\\n<div class=\\"language-c line-numbers-mode\\" data-ext=\\"c\\"><pre class=\\"language-c\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;stdio.h&gt;</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">A</span> <span class=\\"token expression\\"><span class=\\"token number\\">2</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">B</span> <span class=\\"token expression\\">A<span class=\\"token operator\\">+</span>A</span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name\\">C</span> <span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>A<span class=\\"token operator\\">+</span>A<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">define</span> <span class=\\"token macro-name function\\">D</span><span class=\\"token expression\\"><span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">,</span>b<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">(</span>a<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">*</span><span class=\\"token punctuation\\">(</span>b<span class=\\"token punctuation\\">)</span></span></span>\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d,%d,%d\\\\n\\"</span><span class=\\"token punctuation\\">,</span>A<span class=\\"token punctuation\\">,</span>B<span class=\\"token operator\\">*</span>B<span class=\\"token punctuation\\">,</span>C<span class=\\"token operator\\">*</span>C<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token function\\">printf</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"%d\\\\n\\"</span><span class=\\"token punctuation\\">,</span><span class=\\"token function\\">D</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span><span class=\\"token number\\">2</span><span class=\\"token operator\\">+</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
