import{_ as n,V as s,W as a,X as t}from"./framework-1e9ccf99.js";const p={},o=t(`<h2 id="_89-按位与按位或运算符" tabindex="-1"><a class="header-anchor" href="#_89-按位与按位或运算符" aria-hidden="true">#</a> 89.按位与按位或运算符</h2><blockquote><p><strong>&amp;(按位与)</strong>：参加运算的两个数据，如果相应的二进制都为1，则该结果为1，否则为0 <strong>|(按位或)</strong>：参加运算的两个数据，如果相应的二进制都为0，则该位结果都为0，否则为1</p></blockquote><h2 id="_90-按位异或" tabindex="-1"><a class="header-anchor" href="#_90-按位异或" aria-hidden="true">#</a> 90.按位异或</h2><blockquote><p><img src="https://cdn.jsdelivr.net/gh/passwordgloo/icon/info.svg" alt="" loading="lazy">按位异或也称为XOF运算符，如果相应的二进制位不同，则该位结果为1，否则为0</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">jh</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>                <span class="token comment">//交换两个变量的值，不使用中间变量</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
	a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>
	b <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>
	a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>
	b <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n%d\\n%d\\n&quot;</span><span class="token punctuation">,</span>a<span class="token operator">&lt;&lt;</span><span class="token number">38</span><span class="token punctuation">,</span>a<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token number">38</span><span class="token operator">%</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token operator">&lt;&lt;</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//让一个数值或者变量左移大于自身长度的位数或者使用左移右移的位数为负值，在不同的编译器中可能结果不一样，应尽量避免这种情况的发生</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_91-按位运算的综合运用" tabindex="-1"><a class="header-anchor" href="#_91-按位运算的综合运用" aria-hidden="true">#</a> 91.按位运算的综合运用</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>                               <span class="token comment">//整数相加返回其和</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> c<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>c <span class="token operator">=</span> a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">{</span>
		a <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token operator">^</span>a<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>c<span class="token operator">^</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
		b <span class="token operator">=</span> c<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> a<span class="token operator">|</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>     
<span class="token keyword">int</span> <span class="token function">pv</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>                             <span class="token comment">//返回a的第index个二进制位的值</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;</span><span class="token number">32</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;pv的参数有误，程序退出\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>a<span class="token operator">&gt;&gt;</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">po</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>                                 <span class="token comment">//返回把a的第index个二进制位打开之后的值</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;</span><span class="token number">32</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;po的参数有误，程序退出\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> a<span class="token operator">|</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">pc</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>                               <span class="token comment">//返回把a的第index个二进制位关闭之后的值</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;</span><span class="token number">32</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;pc的参数有误，程序退出\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">unsigned</span> <span class="token function">pd</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span>              <span class="token comment">//返回a的从第start到end个二进制位的值</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> start <span class="token operator">&lt;=</span> end <span class="token operator">&amp;&amp;</span> end <span class="token operator">&lt;=</span><span class="token number">32</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> a <span class="token operator">&lt;&lt;</span><span class="token number">32</span><span class="token operator">-</span>end <span class="token operator">&gt;&gt;</span> <span class="token number">32</span><span class="token operator">-</span><span class="token punctuation">(</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;pd函数参数有误，程序退出\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">unsigned</span> <span class="token function">pf</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> a<span class="token punctuation">,</span><span class="token keyword">unsigned</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span>   <span class="token comment">//把b的低(end-1+start)个二进制位赋给 a当中的第start到第end个二进制位，最后返回a的值</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> start <span class="token operator">&lt;=</span> end <span class="token operator">&amp;&amp;</span> end <span class="token operator">&lt;=</span><span class="token number">32</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">int</span> len <span class="token operator">=</span> end<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>start<span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pv</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				a <span class="token operator">=</span> <span class="token function">po</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>start<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">else</span>
				a <span class="token operator">=</span> <span class="token function">pc</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>start<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> a<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;pf函数参数有误，程序退出\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>                                   <span class="token comment">//返回两个整型相乘的积</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">32</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pv</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
			s<span class="token operator">+=</span>a<span class="token operator">&lt;&lt;</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">chufa</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span>                                 <span class="token comment">//返回两个整型的商</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;0不能被整除，程序退出\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> a0 <span class="token operator">=</span> <span class="token function">pv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b0 <span class="token operator">=</span> <span class="token function">pv</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> zheng<span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>a0<span class="token operator">^</span>b0 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
		zheng <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		zheng <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>a0<span class="token punctuation">)</span>
		a <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>b0<span class="token punctuation">)</span>
		b <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>i<span class="token operator">&gt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">pv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">int</span> shang <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>bc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&gt;</span>bc<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			shang <span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
				bc <span class="token operator">=</span> bc<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token function">pv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">{</span>
			shang <span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
				bc <span class="token operator">=</span> bc<span class="token operator">-</span>b<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">|</span><span class="token function">pv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> zheng<span class="token operator">?</span>shang<span class="token operator">:</span><span class="token operator">~</span>shang<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">pv</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">po</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">pc</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%u\\n&quot;</span><span class="token punctuation">,</span><span class="token function">pd</span><span class="token punctuation">(</span><span class="token number">145</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%u\\n&quot;</span><span class="token punctuation">,</span><span class="token function">pf</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">chufa</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_92-位段" tabindex="-1"><a class="header-anchor" href="#_92-位段" aria-hidden="true">#</a> 92.位段</h2><blockquote><p><img src="https://cdn.jsdelivr.net/gh/passwordgloo/icon/check.svg" alt="" loading="lazy">c允许一个结构体中以位为单位指定成员所占内存长度，这种以位为单位的成员称为“位段”，利用位段能够用较少的位数存储数据</p></blockquote><h3 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span>
<span class="token punctuation">{</span>
	<span class="token keyword">unsigned</span> a<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> b<span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> c<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">short</span> m<span class="token punctuation">;</span>
<span class="token punctuation">}</span>data<span class="token punctuation">;</span>              <span class="token comment">//a,b,c分别占2，4，2位，m为short型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><ul><li>给位段赋值注意位段的范围</li><li>声明位段的一般形式：类型名 成员名:宽度 成员名可以省略代表无名位段</li><li>一个位段必须存储到同一存储单元中，不能跨两个单元</li></ul>`,13),e=[o];function c(l,i){return s(),a("div",null,e)}const k=n(p,[["render",c],["__file","bit.html.vue"]]);export{k as default};
