import{_ as n,V as s,W as a,X as t}from"./framework-1e9ccf99.js";const p={},e=t(`<h2 id="_19-字符型數據" tabindex="-1"><a class="header-anchor" href="#_19-字符型數據" aria-hidden="true">#</a> 19.字符型數據</h2><blockquote><p>字符型是以整型形式(ASCII碼)存放在內存單元中。ASCII共128個字符(也就是最多可以用7位數表示)</p></blockquote><table><thead><tr><th>類型</th><th>字符值</th><th>取值範圍</th></tr></thead><tbody><tr><td>signed char</td><td>1</td><td>-128~127</td></tr><tr><td>unsigned char</td><td>1</td><td>0~255</td></tr></tbody></table><blockquote><p>C99把字符型數據作為整型數據的壹種</p></blockquote><blockquote><p>在使用有符號字符類型變量時，允許存儲的值為負數，但是字符的代碼不可能為負值，所以在存儲字符時只用到了0~127這壹部分。</p></blockquote><h2 id="_20-getchar與putchar函數" tabindex="-1"><a class="header-anchor" href="#_20-getchar與putchar函數" aria-hidden="true">#</a> 20.getchar與putchar函數</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span>    <span class="token comment">//該頭文件有getchar與putchar函數的函數聲明</span></span>
<span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回值為int型，返回值為用戶輸入的ASCII碼，出錯返回-1</span>
	<span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//putchar向屏幕輸出壹個字符</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>            <span class="token comment">//從鍵盤中讀入3個字符並輸出</span>
<span class="token punctuation">{</span>
	<span class="token function">putchar</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">putchar</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">putchar</span><span class="token punctuation">(</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_21-浮點型數據" tabindex="-1"><a class="header-anchor" href="#_21-浮點型數據" aria-hidden="true">#</a> 21.浮點型數據</h2><table><thead><tr><th>數據類型</th><th>字節數</th><th>有效數字</th><th>數值範圍(絕對值)</th></tr></thead><tbody><tr><td>float</td><td>4</td><td>6</td><td>0以及1.2e-38~3.4e38</td></tr><tr><td>double,long double</td><td>8</td><td>15</td><td>0以及2.3e-308~1.7e308</td></tr><tr><td>long double</td><td>16</td><td>19</td><td>0以及3.4e-4932~1.1e4932</td></tr></tbody></table><blockquote><p>從數值的左邊第壹個不為0的數字起，壹直到這個數字結束，中間的數字叫這個值的有效數字</p></blockquote><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
註：
(壹)所有常量末尾加的數據類型轉換符可以大小寫不分
(二)在目前學習過的所有格式聲明中只有xeg可以不分大小寫
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//1.定義實型變量</span>
	<span class="token keyword">float</span> a <span class="token operator">=</span> <span class="token number">1.1F</span><span class="token punctuation">;</span>     <span class="token comment">//1.1F表示1.1是個float型數據</span>
	<span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
	<span class="token keyword">long</span> <span class="token keyword">double</span> c <span class="token operator">=</span> <span class="token number">1e-8L</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d,%d&quot;</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token comment">//2.實型數據在格式化輸入輸出時所使用的格式聲明——默認情況下使用帶f和帶e的格式聲明只輸出小數點後6位(第七位四舍五入)</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f,%lf,%Lf\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//小數形式</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%e,%le,%LE\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//指數形式</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%g,%lg,%LG\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//小數形式或者指數形式</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_22-printf格式附加字符" tabindex="-1"><a class="header-anchor" href="#_22-printf格式附加字符" aria-hidden="true">#</a> 22.printf格式附加字符</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//格式聲明 = % 格式附加字符</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> </span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5d\\n&quot;</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5c\\n&quot;</span><span class="token punctuation">,</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%5s\\n&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;abcd&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%-5dA\\n&quot;</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%7.2f\\n&quot;</span><span class="token punctuation">,</span><span class="token number">12.345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%7.1f\\n&quot;</span><span class="token punctuation">,</span><span class="token number">12.345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%.5lf\\n&quot;</span><span class="token punctuation">,</span><span class="token number">12.345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%11lf\\n&quot;</span><span class="token punctuation">,</span><span class="token number">12.345</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_23-1scanf函數註意事項-2" tabindex="-1"><a class="header-anchor" href="#_23-1scanf函數註意事項-2" aria-hidden="true">#</a> 23.1scanf函數註意事項(2)</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//scanf函數中不可以使用#</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> a <span class="token punctuation">;</span>
	<span class="token comment">/*
	scanf(&quot;%5d&quot;,&amp;a);
	printf(&quot;%d\\n&quot;,a);
	*/</span>
	<span class="token comment">/*
	scanf(&quot;%-5d&quot;,&amp;a);     scanf函數不支持負的域寬
	printf(&quot;%d&quot;,a);
	*/</span>
	<span class="token keyword">double</span> b<span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%7.2lf&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lf&quot;</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">putchar</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_23-2運算符-2" tabindex="-1"><a class="header-anchor" href="#_23-2運算符-2" aria-hidden="true">#</a> 23.2運算符(2)</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d\\n&quot;</span><span class="token punctuation">,</span><span class="token operator">--</span>i<span class="token punctuation">,</span><span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d\\n&quot;</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*	printf(&quot;%d\\n&quot;,--(i+j));			//error 自增自減運算符不能用於壹個數值，只能用於壹個變量  */</span>
	i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>i<span class="token operator">++</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>


	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//(double) a是把a這個數值表達式轉化為double型數據，而不是把a變量轉化為double型變量</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),c=[e];function o(i,l){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","order-2.html.vue"]]);export{d as default};
