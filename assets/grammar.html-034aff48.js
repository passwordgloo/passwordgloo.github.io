import{_ as d,V as u,W as k,$ as l,a0 as s,Z as a,Y as n,X as i,D as p}from"./framework-1e9ccf99.js";const v={},m=a("h2",{id:"准备工作",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#准备工作","aria-hidden":"true"},"#"),n(" 准备工作")],-1),h=a("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[a("pre",{class:"language-javascript"},[a("code",null,[a("span",{class:"token operator"},"<"),n("input type"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"button"'),n(" value"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"点我试试"'),n(" onclick"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},`"alert('Hello World')"`),n(),a("span",{class:"token operator"},"/"),a("span",{class:"token operator"},">"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),b=a("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[a("pre",{class:"language-javascript"},[a("code",null,[a("span",{class:"token operator"},"<"),n("script"),a("span",{class:"token operator"},">"),n(`
    `),a("span",{class:"token function"},"alert"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"'Hello  World!'"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),n(`
`),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),n("script"),a("span",{class:"token operator"},">"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),g=a("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[a("pre",{class:"language-javascript"},[a("code",null,[a("span",{class:"token operator"},"<"),n("script src"),a("span",{class:"token operator"},"="),a("span",{class:"token string"},'"style.js"'),a("span",{class:"token operator"},">"),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"/"),n("script"),a("span",{class:"token operator"},">"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),f=i('<h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h2><h3 id="语句" tabindex="-1"><a class="header-anchor" href="#语句" aria-hidden="true">#</a> 语句</h3><p>结束符<code>;</code>可加可不加</p><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3>',4),j=a("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[a("pre",{class:"language-javascript"},[a("code",null,[a("span",{class:"token comment"},"//行注释"),n(`
`),a("span",{class:"token operator"},"<"),a("span",{class:"token operator"},"!"),a("span",{class:"token operator"},"--"),n(" 容易与"),a("span",{class:"token constant"},"HTML"),n(`注释混淆，不建议使用
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),x=a("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[a("pre",{class:"language-javascript"},[a("code",null,[a("span",{class:"token comment"},"/*注释内容*/"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),y=i(`<h2 id="输入输出语句" tabindex="-1"><a class="header-anchor" href="#输入输出语句" aria-hidden="true">#</a> 输入输出语句</h2><table><thead><tr><th>方法</th><th>说明</th><th>归属</th></tr></thead><tbody><tr><td>alert(msg)</td><td>浏览器弹出警示框</td><td>浏览器</td></tr><tr><td>console.log(msg)</td><td>浏览器控制台打印输出信息</td><td>浏览器</td></tr><tr><td>prompt(info)</td><td>浏览器弹出输入框，用户可以输入</td><td>浏览器</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;要输出的内容&quot;</span><span class="token punctuation">)</span>； <span class="token comment">//向body输出内容</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;警告信息&quot;</span><span class="token punctuation">)</span>；
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;控制台打印&#39;</span><span class="token punctuation">)</span>；
<span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;你今年多大了&#39;</span><span class="token punctuation">)</span>； <span class="token comment">//输入语句</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><blockquote><p>[warning]变量名不允许包含空格或标点符号 变量名允许包含字母、数字、美元符号和下划线，但第一个子字母不能是数字 声明关键字使用<code>let</code>替代var，原因是</p></blockquote><ul><li>var可以先使用，再声明，不合理</li><li>var声明过的变量可以重复使用，不合理</li><li>var变量提升，全局变量，没有块级作用域</li></ul><h3 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h3><h4 id="内容" tabindex="-1"><a class="header-anchor" href="#内容" aria-hidden="true">#</a> 内容</h4><blockquote><p>Javascript是一种弱类型语言，不需要进行任何类型声明</p></blockquote>`,9),w=a("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[a("pre",{class:"language-javascript"},[a("code",null,[a("span",{class:"token keyword"},"let"),n(" height "),a("span",{class:"token operator"},"="),n(),a("span",{class:"token string"},`"about 5'10\\" tall"`),n(),a("span",{class:"token comment"},"//对内部“转义"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),_=a("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[a("pre",{class:"language-javascript"},[a("code",null,[a("span",{class:"token keyword"},"let"),n(" age "),a("span",{class:"token operator"},"="),n(),a("span",{class:"token number"},"33.24"),n(`
`),a("span",{class:"token keyword"},"let"),n(" temperature "),a("span",{class:"token operator"},"="),n(),a("span",{class:"token operator"},"-"),a("span",{class:"token number"},"20.333"),n(`
`),a("span",{class:"token comment"},"//使用isNaN()判断变量是否是数字"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),q=a("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[a("pre",{class:"language-javascript"},[a("code",null,[a("span",{class:"token keyword"},"let"),n(" sleeping "),a("span",{class:"token operator"},"="),n(),a("span",{class:"token boolean"},"true"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),A=i(`<h4 id="获取变量数据类型" tabindex="-1"><a class="header-anchor" href="#获取变量数据类型" aria-hidden="true">#</a> 获取变量数据类型</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">18</span>
<span class="token keyword">let</span> uname <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span>
<span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token keyword">let</span> buy
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> age<span class="token punctuation">)</span>		<span class="token comment">//number</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> uname<span class="token punctuation">)</span>	<span class="token comment">//string</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> flag<span class="token punctuation">)</span>	<span class="token comment">//boolean</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> buy<span class="token punctuation">)</span>		<span class="token comment">//undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="数据类型转换" tabindex="-1"><a class="header-anchor" href="#数据类型转换" aria-hidden="true">#</a> 数据类型转换</h4><blockquote><p>通俗来说，就是把一种数据类型的变量转化为我们需要的数据类型</p></blockquote><h5 id="隐式转换" tabindex="-1"><a class="header-anchor" href="#隐式转换" aria-hidden="true">#</a> 隐式转换</h5><ul><li><code>+</code> 号两边只要有一个是字符串，都会把另一个转成字符串</li><li><code>-</code> <code>*</code> <code>/</code>算术运算符会自动转换为数字型</li></ul><h5 id="显式转换" tabindex="-1"><a class="header-anchor" href="#显式转换" aria-hidden="true">#</a> 显式转换</h5>`,7),N=a("div",{class:"language-text line-numbers-mode","data-ext":"text"},[a("pre",{class:"language-text"},[a("code",null,`parseint('78')			//转化为整数型
parseFloat('12.2')		//转化为浮点型
Number('12')  			//强制转化函数
`)]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),T=a("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[a("pre",{class:"language-javascript"},[a("code",null,[a("span",{class:"token keyword"},"let"),n(" num "),a("span",{class:"token operator"},"="),n(),a("span",{class:"token number"},"12"),n(`
console`),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),n("num"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"toString"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),n("			"),a("span",{class:"token comment"},"//方法1"),n(`
console`),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token function"},"String"),a("span",{class:"token punctuation"},"("),n("num"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),n("			"),a("span",{class:"token comment"},"//方法2"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),B=a("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[a("pre",{class:"language-javascript"},[a("code",null,[n("console"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"log"),a("span",{class:"token punctuation"},"("),a("span",{class:"token function"},"Boolean"),a("span",{class:"token punctuation"},"("),a("span",{class:"token string"},"''"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),n(),a("span",{class:"token comment"},"// false"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),V=i(`<h3 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> beatles <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//声明数组，()填数字确定数量</span>
<span class="token keyword">let</span> beatles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;igloo&quot;</span> <span class="token comment">//填充第一个</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>简化<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token keyword">let</span> beatles <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;igloo&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Bazi&quot;</span><span class="token punctuation">)</span> <span class="token comment">//声明数组并初始化</span>
<span class="token keyword">let</span> lemon <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;igloo&quot;</span><span class="token punctuation">,</span><span class="token number">1987</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">]</span> <span class="token comment">//使用数组字面量方式创建并声明</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>常规写法<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token keyword">let</span> igloo <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
igloo<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;igloo&#39;</span>
igloo<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">&#39;male&#39;</span>
igloo<span class="token punctuation">.</span>birthyear <span class="token operator">=</span> <span class="token number">1940</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 简写 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token keyword">let</span> igloo <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;igloo&quot;</span><span class="token punctuation">,</span>
    gender<span class="token operator">=</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">,</span>
    birthyear <span class="token operator">=</span> <span class="token number">1940</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="关键字和保留字" tabindex="-1"><a class="header-anchor" href="#关键字和保留字" aria-hidden="true">#</a> 关键字和保留字</h2><h3 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h3><p>break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 等。</p><h3 id="保留字" tabindex="-1"><a class="header-anchor" href="#保留字" aria-hidden="true">#</a> 保留字</h3><p>boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile 等。</p><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作" aria-hidden="true">#</a> 操作</h2><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>%</td><td>取余</td></tr></tbody></table><h4 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接" aria-hidden="true">#</a> 字符串拼接</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1.字符串 &quot;相加&quot;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token string">&#39;world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hello world</span>
<span class="token comment">//2. 数值字符串 &quot;相加&quot;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;100&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;100&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100100</span>
<span class="token comment">//3. 数值字符串 + 数值</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;11&#39;</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 1112</span>
<span class="token comment">//4.布尔型</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="模板字符串拼接" tabindex="-1"><a class="header-anchor" href="#模板字符串拼接" aria-hidden="true">#</a> 模板字符串拼接</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">大家好，我叫$(name)，今年$(age-20)岁了</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token comment">//可换行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="递增递减运算符" tabindex="-1"><a class="header-anchor" href="#递增递减运算符" aria-hidden="true">#</a> 递增递减运算符</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span>  num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">++</span>num <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 21</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span>  num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符" aria-hidden="true">#</a> 比较运算符</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>==</td><td>判等号（会转型)</td></tr><tr><td>!=</td><td>不等于</td></tr><tr><td>===</td><td>全等，值和数据类型一致</td></tr></tbody></table><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h3><ul><li><code>&amp;&amp;</code>一假即假</li><li><code>||</code>一真即真</li><li><code>!</code>取反</li></ul><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h3><ul><li>=</li><li>+=、-=、*=、/=、%=</li></ul><h3 id="运算符优先级" tabindex="-1"><a class="header-anchor" href="#运算符优先级" aria-hidden="true">#</a> 运算符优先级</h3><table><thead><tr><th>优先级</th><th>运算符</th></tr></thead><tbody><tr><td>1</td><td>小括号</td></tr><tr><td>2</td><td>一元运算符</td></tr><tr><td>3</td><td>算数运算符</td></tr><tr><td>4</td><td>关系运算符</td></tr><tr><td>5</td><td>相等运算符</td></tr><tr><td>6</td><td>逻辑运算符</td></tr><tr><td>7</td><td>赋值运算符</td></tr><tr><td>8</td><td>逗号运算符</td></tr></tbody></table><h2 id="分支控制" tabindex="-1"><a class="header-anchor" href="#分支控制" aria-hidden="true">#</a> 分支控制</h2><h3 id="if-系列" tabindex="-1"><a class="header-anchor" href="#if-系列" aria-hidden="true">#</a> If 系列</h3><h4 id="if" tabindex="-1"><a class="header-anchor" href="#if" aria-hidden="true">#</a> if</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 条件成立执行代码，否则什么也不做</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 条件成立执行的代码语句</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="if-else" tabindex="-1"><a class="header-anchor" href="#if-else" aria-hidden="true">#</a> if else</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 条件成立执行if里面代码，否则执行else 里面的代码</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// [如果] 条件成立执行的代码</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// [否则] 执行的代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="if-else-if" tabindex="-1"><a class="header-anchor" href="#if-else-if" aria-hidden="true">#</a> if else if</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 适合于检查多重条件。</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    语句<span class="token number">1</span>；
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    语句<span class="token number">2</span>；
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件表达式<span class="token number">3</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>
   语句<span class="token number">3</span>；
 <span class="token operator">...</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 上述条件都不成立执行此处代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三元表达式" tabindex="-1"><a class="header-anchor" href="#三元表达式" aria-hidden="true">#</a> 三元表达式</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>表达式<span class="token number">1</span> <span class="token operator">?</span> 表达式<span class="token number">2</span> <span class="token operator">:</span> 表达式<span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="switch" tabindex="-1"><a class="header-anchor" href="#switch" aria-hidden="true">#</a> Switch</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">switch</span><span class="token punctuation">(</span> 表达式 <span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">case</span> <span class="token literal-property property">value1</span><span class="token operator">:</span>
        <span class="token comment">// 表达式 等于 value1 时要执行的代码</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token literal-property property">value2</span><span class="token operator">:</span>
        <span class="token comment">// 表达式 等于 value2 时要执行的代码</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token comment">// 表达式 不等于任何一个 value 时要执行的代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h2><h3 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环" aria-hidden="true">#</a> for循环</h3>`,41),C=a("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[a("pre",{class:"language-javascript"},[a("code",null,[a("span",{class:"token keyword"},"for"),a("span",{class:"token punctuation"},"("),n("初始化变量"),a("span",{class:"token punctuation"},";"),n(" 条件表达式"),a("span",{class:"token punctuation"},";"),n(" 操作表达式 "),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token comment"},"//循环体"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),S=a("table",null,[a("thead",null,[a("tr",null,[a("th",null,"名称"),a("th",null,"作用")])]),a("tbody",null,[a("tr",null,[a("td",null,"初始化变量"),a("td",null,"通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。")]),a("tr",null,[a("td",null,"条件表达式"),a("td",null,"用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。")]),a("tr",null,[a("td",null,"操作表达式"),a("td",null,"用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。")])])],-1),H=a("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[a("pre",{class:"language-javascript"},[a("code",null,[a("span",{class:"token keyword"},"for"),n(),a("span",{class:"token punctuation"},"("),n("外循环的初始"),a("span",{class:"token punctuation"},";"),n(" 外循环的条件"),a("span",{class:"token punctuation"},";"),n(" 外循环的操作表达式"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token keyword"},"for"),n(),a("span",{class:"token punctuation"},"("),n("内循环的初始"),a("span",{class:"token punctuation"},";"),n(" 内循环的条件"),a("span",{class:"token punctuation"},";"),n(" 内循环的操作表达式"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`  
       需执行的代码`),a("span",{class:"token punctuation"},";"),n(`
   `),a("span",{class:"token punctuation"},"}"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),J=i(`<h3 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环" aria-hidden="true">#</a> while循环</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">while</span> <span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 循环体代码 </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="do-while循环" tabindex="-1"><a class="header-anchor" href="#do-while循环" aria-hidden="true">#</a> do……while循环</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">do</span> <span class="token punctuation">{</span>
    <span class="token comment">// 循环体代码 - 条件表达式为 true 时重复执行循环体代码</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="continue、break" tabindex="-1"><a class="header-anchor" href="#continue、break" aria-hidden="true">#</a> continue、break</h3><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">arguaments</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    statements<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//argumetns为形式参数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象-1" tabindex="-1"><a class="header-anchor" href="#对象-1" aria-hidden="true">#</a> 对象</h2><h3 id="属性与方法" tabindex="-1"><a class="header-anchor" href="#属性与方法" aria-hidden="true">#</a> 属性与方法</h3><blockquote><p>属性是隶属于某个特定对象的变量</p><p>方法是只有某个特定对象才能调用的函数</p><p>实例是对象的具体个体</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>igloo<span class="token punctuation">.</span>name    <span class="token comment">// 调用名字属性</span>
igloo<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span>  <span class="token comment">// 调用名字属性</span>
igloo<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//sleep函数是igloo对象的方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="内建对象" tabindex="-1"><a class="header-anchor" href="#内建对象" aria-hidden="true">#</a> 内建对象</h3><p>Javascript提供的一系列定义好的对象</p><h3 id="宿主对象" tabindex="-1"><a class="header-anchor" href="#宿主对象" aria-hidden="true">#</a> 宿主对象</h3><p>浏览器提供的预定义对象</p>`,15);function W($,z){const c=p("Tabs"),r=p("CodeTabs");return u(),k("div",null,[m,l(c,{id:"3",data:[{title:"行内式"},{title:"内部"},{title:"外部"}]},{tab0:s(({title:e,value:t,isActive:o})=>[h]),tab1:s(({title:e,value:t,isActive:o})=>[b]),tab2:s(({title:e,value:t,isActive:o})=>[g]),_:1}),f,l(c,{id:"26",data:[{title:"行注释"},{title:"块注释"}]},{tab0:s(({title:e,value:t,isActive:o})=>[j]),tab1:s(({title:e,value:t,isActive:o})=>[x]),_:1}),y,l(r,{id:"124",data:[{title:"字符串"},{title:"数值"},{title:"布尔值"}]},{tab0:s(({title:e,value:t,isActive:o})=>[w]),tab1:s(({title:e,value:t,isActive:o})=>[_]),tab2:s(({title:e,value:t,isActive:o})=>[q]),_:1}),A,l(c,{id:"165",data:[{title:"数字型"},{title:"字符串"},{title:"布尔型"}]},{tab0:s(({title:e,value:t,isActive:o})=>[N]),tab1:s(({title:e,value:t,isActive:o})=>[T]),tab2:s(({title:e,value:t,isActive:o})=>[B]),_:1}),V,l(c,{id:"493",data:[{title:"语法"},{title:"双重循环"}]},{tab0:s(({title:e,value:t,isActive:o})=>[C,S]),tab1:s(({title:e,value:t,isActive:o})=>[H]),_:1}),J])}const E=d(v,[["render",W],["__file","grammar.html.vue"]]);export{E as default};
