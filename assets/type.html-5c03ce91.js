import{_ as n,V as s,W as a,X as t}from"./framework-1e9ccf99.js";const p={},e=t(`<h2 id="_71-结构体的定义和初始化" tabindex="-1"><a class="header-anchor" href="#_71-结构体的定义和初始化" aria-hidden="true">#</a> 71.结构体的定义和初始化</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
                                               <span class="token comment">//结构体定义总结：结构体标记和变量名至少有一种，如果有变量。可以进行初始化</span>
<span class="token keyword">struct</span> <span class="token class-name">Student</span>                                 <span class="token comment">//1.定义时为结构体起一个结构体标记名</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token keyword">double</span> score<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Student2</span>                                 <span class="token comment">//2.定义时为结构体起一个结构体标记名并定义这种数据类型的变量</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token keyword">double</span> score<span class="token punctuation">;</span>
<span class="token punctuation">}</span>A<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Student3</span>                                 <span class="token comment">//3.定义时为结构体起一个结构体标记名并为变量初始化</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token keyword">double</span> score<span class="token punctuation">;</span>
<span class="token punctuation">}</span>A1<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">*</span>p1<span class="token punctuation">;</span>
<span class="token keyword">struct</span>                                 <span class="token comment">//4.只定义结构体类型的变量</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token keyword">double</span> score<span class="token punctuation">;</span>
<span class="token punctuation">}</span>A2<span class="token punctuation">,</span><span class="token operator">*</span>p2<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
	<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Student</span> a <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment">//①完全初始化</span>
	<span class="token keyword">struct</span> <span class="token class-name">Student</span> b <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment">//②部分初始化</span>
	<span class="token keyword">struct</span> <span class="token class-name">Student</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>                    <span class="token comment">//③定义结构体变量时，使用其他的结构体变量完成初始化</span>
	<span class="token keyword">struct</span> <span class="token class-name">Student</span> d <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">;</span>         <span class="token comment">//④c99支持这种形式在定义一个定义一个结构体变量时，对其某一个成员初始化</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;学生的姓名：%s，年龄：%d,成绩：%lf&quot;</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>age<span class="token punctuation">,</span>c<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">Student</span> a<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入学生的姓名、年龄和成绩\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%d%lf&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">.</span>age<span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;学生的姓名：%s，年龄：%d,成绩：%lf&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>name<span class="token punctuation">,</span>a<span class="token punctuation">.</span>age<span class="token punctuation">,</span>a<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">//①可以通过 变量名.成员名的方式访问一个结构体变量的成员</span>
	<span class="token keyword">struct</span> <span class="token class-name">Student</span> <span class="token operator">*</span>p <span class="token operator">=</span><span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;学生的姓名：%s，年龄：%d,成绩：%lf&quot;</span><span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>name<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>age<span class="token punctuation">,</span>p<span class="token operator">-&gt;</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//②可以通过 指针-&gt;成员名 的方式访问一个结构体变量的成员</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_72-1结构体变量所占字节长度" tabindex="-1"><a class="header-anchor" href="#_72-1结构体变量所占字节长度" aria-hidden="true">#</a> 72.1结构体变量所占字节长度</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">4</span></span></span>
<span class="token keyword">struct</span> <span class="token class-name">Stu</span>
<span class="token punctuation">{</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">double</span> score<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;请输入第%d个学生的姓名和成绩：\\n&quot;</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//		scanf(&quot;%s%lf&quot;,&amp;p[i].name,&amp;p[i].score);          与下面一句等价</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%s%lf&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>p<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">-&gt;</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>


<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>
		<span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token operator">&gt;</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span>
			<span class="token punctuation">{</span>
				<span class="token keyword">struct</span> <span class="token class-name">Stu</span> b <span class="token operator">=</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				p<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
				p<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Stu</span> <span class="token operator">*</span>p<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;第%d个学生的姓名：%s,成绩：%lf\\n&quot;</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">Stu</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token function">input</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">show</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_72-2结构体数组和指针" tabindex="-1"><a class="header-anchor" href="#_72-2结构体数组和指针" aria-hidden="true">#</a> 72.2结构体数组和指针</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//字节对齐，各种数据类型是按照一定的规则在内存中排列的</span>
	<span class="token keyword">short</span> a<span class="token punctuation">;</span>
	<span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token keyword">double</span> c<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d,%d\\n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>b<span class="token operator">&amp;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>c<span class="token operator">%</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Stu1</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">char</span> a<span class="token punctuation">;</span>
		<span class="token keyword">short</span> b<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Stu2</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">char</span> a<span class="token punctuation">;</span>
		<span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Stu1</span> A<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Stu2</span> B<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d\\n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>A<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>B<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1.结构体变量的首地址能够被其最宽基本类型成员的大小所整除</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d\\n&quot;</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2.结构体成员对于结构体变量的首地址的偏移量都是对其成员大小的整数倍</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d\\n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>A<span class="token punctuation">.</span>b<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>A<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>B<span class="token punctuation">.</span>b<span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>B<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Stu3</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">char</span> a<span class="token punctuation">;</span>
		<span class="token keyword">double</span> f<span class="token punctuation">;</span>
		<span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>C<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//结构体总大小为结构体最宽基本类型成员的整数倍</span>
	<span class="token keyword">struct</span> <span class="token class-name">Stu4</span>
	<span class="token punctuation">{</span>
		<span class="token keyword">char</span> a<span class="token punctuation">;</span>
		<span class="token keyword">struct</span> <span class="token class-name">Stu2</span> b<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>D<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;d\\n&quot;</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>D<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//如果结构体成员是复合数据类型的，那么它对于结构体首地址的偏移量，应该是其最宽基本类型成员的整数倍</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_72-3复杂的数据类型" tabindex="-1"><a class="header-anchor" href="#_72-3复杂的数据类型" aria-hidden="true">#</a> 72.3复杂的数据类型</h2><blockquote><p>看变量所属圆括号的最外层，把最外层的数据类型设为一个新数据类型，然后去掉最外层的圆括号，通过这种方法，直到原式转化为“整型数据变量”的形式</p></blockquote><h2 id="_73-typedef" tabindex="-1"><a class="header-anchor" href="#_73-typedef" aria-hidden="true">#</a> 73.typedef</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">int</span> Count<span class="token punctuation">;</span>       <span class="token comment">//1.Count代表int类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> Num<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">//2.NUm代表一个含有3个int型元素的数组类型</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> 
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
	<span class="token keyword">double</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>Stu<span class="token punctuation">;</span>                    <span class="token comment">//3.Stu代表一个结构体类型</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INI</span> <span class="token expression"><span class="token keyword">int</span></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	Count a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>         <span class="token comment">//①定义一个int类型变量a</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	Num b <span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token comment">//②定义一个含有3个int类型元素的数组b</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d%d&quot;</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	Stu m<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//③定义了1个结构体类型变量m</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%lf&quot;</span><span class="token punctuation">,</span>m<span class="token punctuation">.</span>a<span class="token punctuation">,</span>m<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	INI c <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//④在预编译阶段，该句被替换为 int c =10;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_74-单向动态链表" tabindex="-1"><a class="header-anchor" href="#_74-单向动态链表" aria-hidden="true">#</a> 74.单向动态链表</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span>
<span class="token punctuation">{</span>	
	<span class="token keyword">int</span> data<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>pnext<span class="token punctuation">;</span>
<span class="token punctuation">}</span>N<span class="token punctuation">,</span><span class="token operator">*</span>P<span class="token punctuation">;</span>
P <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	P pheard <span class="token operator">=</span> <span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>pheard <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;分配内存失败，程序退出\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	pheard<span class="token operator">-&gt;</span>pnext <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> pheard<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span>P pheard<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	P last <span class="token operator">=</span> <span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>last <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;分配内存失败，程序退出\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	last<span class="token operator">-&gt;</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>
	last<span class="token operator">-&gt;</span>pnext <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>pheard<span class="token operator">-&gt;</span>pnext <span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>
		pheard <span class="token operator">=</span> pheard <span class="token operator">=</span>last<span class="token punctuation">;</span>
	pheard<span class="token operator">-&gt;</span>pnext <span class="token operator">=</span> last<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>P pheard<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>pheard<span class="token operator">-&gt;</span>pnext <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		pheard <span class="token operator">=</span> pheard<span class="token operator">-&gt;</span>pnext<span class="token punctuation">;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>pheard<span class="token operator">-&gt;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">len</span><span class="token punctuation">(</span>P pheard<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">(</span>pheard <span class="token operator">=</span> pheard<span class="token operator">-&gt;</span>pnext<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token punctuation">;</span>
	<span class="token keyword">return</span> i<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
bool <span class="token function">del</span><span class="token punctuation">(</span>P pheard<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;</span> <span class="token function">len</span><span class="token punctuation">(</span>pheard<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> false<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>index<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
		pheard <span class="token operator">=</span> pheard<span class="token operator">-&gt;</span>pnext<span class="token punctuation">;</span>
	P ptail<span class="token operator">=</span>pheard<span class="token operator">-&gt;</span>pnext<span class="token operator">-&gt;</span>pnext<span class="token punctuation">;</span>
	<span class="token function">free</span><span class="token punctuation">(</span>pheard<span class="token operator">-&gt;</span>pnext<span class="token punctuation">)</span><span class="token punctuation">;</span>
	pheard<span class="token operator">-&gt;</span>pnext<span class="token operator">=</span>ptail<span class="token punctuation">;</span>
	<span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
bool <span class="token function">insert</span><span class="token punctuation">(</span>P pheard<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;=</span><span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;</span><span class="token function">len</span><span class="token punctuation">(</span>pheard<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> false<span class="token punctuation">;</span>
	P pw <span class="token operator">=</span> <span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>pw <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token punctuation">{</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;分配内存失败，程序退出\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	pw<span class="token operator">-&gt;</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>index<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
		pheard <span class="token operator">=</span>pheard<span class="token operator">-&gt;</span>pnext<span class="token punctuation">;</span>
	pw<span class="token operator">-&gt;</span>pnext <span class="token operator">=</span> pheard<span class="token operator">-&gt;</span>pnext<span class="token punctuation">;</span>
	pheard<span class="token operator">-&gt;</span>pnext<span class="token operator">=</span> pw<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	P pheard <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">input</span><span class="token punctuation">(</span>pheard<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">input</span><span class="token punctuation">(</span>pheard<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">input</span><span class="token punctuation">(</span>pheard<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">input</span><span class="token punctuation">(</span>pheard<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	del(pheard,2);</span>
	<span class="token function">insert</span><span class="token punctuation">(</span>pheard<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">show</span><span class="token punctuation">(</span>pheard<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token function">len</span><span class="token punctuation">(</span>pheard<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_75-共用体的定义和变量初始化" tabindex="-1"><a class="header-anchor" href="#_75-共用体的定义和变量初始化" aria-hidden="true">#</a> 75.共用体的定义和变量初始化</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">union</span> Data
<span class="token punctuation">{</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
	<span class="token keyword">double</span> f<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">union</span> Data a<span class="token punctuation">;</span>
<span class="token comment">//	a =3;                error 不可以直接用一个基本类型的数据对共用体变量赋值</span>
	a<span class="token punctuation">.</span>i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
	a<span class="token punctuation">.</span>ch <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lf\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
	a<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lf\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%c\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span>i<span class="token punctuation">,</span>a<span class="token punctuation">.</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出垃圾值，因为共用体所有成员所使用d内存的开头地址的值都是一样的。所以当我们对其中一个成员赋值，其他成员也会改变</span>

<span class="token comment">//定义共用体变量时的初始化</span>
	<span class="token keyword">union</span> Data b<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">123</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">//此种方式只能对共用体第一个元素进行赋值</span>
<span class="token comment">//	void Data c = {.f = 4.5};  //这种方法可以指定某一个成员进行赋值，这属于C99的功能</span>
	<span class="token keyword">union</span> Data d <span class="token operator">=</span>b<span class="token punctuation">;</span>     <span class="token comment">//c.99允许共用体变量互相赋值</span>

	<span class="token comment">//1.共用体变量的地址和长度必须被其最宽基本类型成员的大小整除</span>
	<span class="token comment">//2.其总长度必须大于等于最宽成员的宽度</span>
	<span class="token keyword">union</span> Data2
	<span class="token punctuation">{</span>
		<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">int</span> b<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>g<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_76-枚举类型" tabindex="-1"><a class="header-anchor" href="#_76-枚举类型" aria-hidden="true">#</a> 76.枚举类型</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token comment">//枚举类型定义总结：枚举名和枚举变量至少有一个即可，如果有变量，可以对变量进行初始化。定义枚举元素时也可以显示的指定数值</span>
<span class="token keyword">enum</span> <span class="token class-name">A</span><span class="token punctuation">{</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>a3<span class="token punctuation">,</span>a4<span class="token punctuation">}</span><span class="token punctuation">;</span>                 <span class="token comment">//1.只定义枚举名</span>
<span class="token keyword">enum</span> <span class="token class-name">B</span><span class="token punctuation">{</span>b1<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>b2<span class="token punctuation">,</span>b3<span class="token punctuation">,</span>b4<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>b5<span class="token punctuation">,</span>b6<span class="token punctuation">,</span>b7<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">//2.给部分枚举元素指定一个值</span>
<span class="token keyword">enum</span> <span class="token class-name">C</span><span class="token punctuation">{</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">}</span>n<span class="token punctuation">;</span>                   <span class="token comment">//3.定义枚举名和枚举变量</span>
<span class="token keyword">enum</span> <span class="token punctuation">{</span>d1<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>d3<span class="token punctuation">}</span>m<span class="token punctuation">;</span>                    <span class="token comment">//4.只定义枚举变量而不定义枚举名</span>
<span class="token keyword">enum</span> <span class="token class-name">E</span><span class="token punctuation">{</span>e1<span class="token punctuation">,</span>e2<span class="token punctuation">,</span>e3<span class="token punctuation">}</span>k <span class="token operator">=</span>e2<span class="token punctuation">;</span>               <span class="token comment">//5.定义了枚举变量并为其初始化</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">enum</span> <span class="token class-name">A</span> w <span class="token operator">=</span>a2<span class="token punctuation">;</span>
<span class="token comment">//	w =1;       error 因为两者数据类型不同</span>
	w<span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">enum</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token comment">//强制数据类型转换</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//	a2 = (enum A)10;   error 因为a2是一个常量</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d,%d,%d\\n&quot;</span><span class="token punctuation">,</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>a3<span class="token punctuation">,</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//因为c语言在编译的时候会根据枚举元素定义的顺序分别给他们一个默认值0</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d,%d,%d,%d,%d,%d&quot;</span><span class="token punctuation">,</span>b1<span class="token punctuation">,</span>b2<span class="token punctuation">,</span>b3<span class="token punctuation">,</span>b4<span class="token punctuation">,</span>b5<span class="token punctuation">,</span>b6<span class="token punctuation">,</span>b7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//定义枚举类型的时候可以为枚举元素指定一个值，未指定值的元素的值将是前一个元素加1的值</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","type.html.vue"]]);export{k as default};
