import{_ as a,V as t,W as e,Y as s,X as n}from"./framework-1e9ccf99.js";const p={},o=n(`<h2 id="_18-1转义字符" tabindex="-1"><a class="header-anchor" href="#_18-1转义字符" aria-hidden="true">#</a> 18.1转义字符</h2><table><thead><tr><th>转义字符</th><th>字符值</th><th>输出结果</th><th>转义字符</th><th>字符值</th><th>输出结果</th></tr></thead><tbody><tr><td>\\&#39;</td><td>一个单撇号(&#39;)</td><td>具有此8进制的字符</td><td>\\&quot;</td><td>一个双撇号(&quot;)</td><td>输出此字符</td></tr><tr><td>?</td><td>一个问号(?)</td><td>输出此字符</td><td>\\\\</td><td>一个反斜线(\\)</td><td>输出此字符</td></tr><tr><td>\\a</td><td>警告</td><td>产生视觉或声音信号</td><td>\\b</td><td>退格</td><td>将当前位置后退一个字符</td></tr><tr><td><code>\\f</code></td><td>换页</td><td>将当前位置移到下一页的开头</td><td>\\n</td><td>换行</td><td>将当前位置移到下一行的开头</td></tr><tr><td><code>\\r</code></td><td>回车</td><td>将当前位置移到本行的开头</td><td>\\t</td><td>水平制表符</td><td>将当前位置移到下一个Tab位置</td></tr><tr><td>\\v</td><td>垂直制表符</td><td>将当前位置移到下一个垂直制表对齐点</td><td>\\o、\\oo、\\ooo</td><td>ASCII码</td><td></td></tr><tr><td>\\xh[h=……](16进制数字)</td><td>与该16进制码对的ASCII字符</td><td>与该16进制码对应的字符</td><td></td><td></td><td></td></tr></tbody></table><h2 id="_18-2字面常量" tabindex="-1"><a class="header-anchor" href="#_18-2字面常量" aria-hidden="true">#</a> 18.2字面常量</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/*
常量分类:
①字面常量(直接常量)：数值常量(分为整型常量和浮点型常量)，字符串常量和字符常量
②符号常量
③常变量
*/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//1.整型常量</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d\\n&quot;</span><span class="token punctuation">,</span><span class="token number">2355</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//2.浮点型常量</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lf,%lf&quot;</span><span class="token punctuation">,</span><span class="token number">3.23</span><span class="token punctuation">,</span><span class="token number">3e-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//3.字符串常量</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;%dsaxc\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//4.字符型常量</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c,%d\\n&quot;</span><span class="token punctuation">,</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c,%c,%c,%c\\n&quot;</span><span class="token punctuation">,</span><span class="token char">&#39;\\\\&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;\\&#39;&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;\\?&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;\\&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;1111\\b\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;4444\\t5555\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\101 \\102 \\103\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;\\x41\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-3符号常量和常变量" tabindex="-1"><a class="header-anchor" href="#_18-3符号常量和常变量" aria-hidden="true">#</a> 18.3符号常量和常变量</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">P1</span> <span class="token expression"><span class="token number">3.14</span>    </span><span class="token comment">//1.符号常量 只存在于预编译阶段，编译阶段就不存在了。经过预编译后，全部变为字面常量</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ID</span> <span class="token expression"><span class="token number">101</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CH</span> <span class="token char">&#39;A&#39;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">S</span> <span class="token string">&quot;haha&quot;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%lf,%d,%c,%s\\n&quot;</span><span class="token punctuation">,</span>P1<span class="token punctuation">,</span>ID<span class="token punctuation">,</span>CH<span class="token punctuation">,</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">;</span>   <span class="token comment">//2.常变量必须在定义的时候初始化，初始化之后其值不可以被修改</span>
<span class="token comment">//const int b;     error 因为定义常变量未指定初始值</span>
<span class="token comment">//a = 90;          error 因为常变量的值不可以被修改</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_18-4补码" tabindex="-1"><a class="header-anchor" href="#_18-4补码" aria-hidden="true">#</a> 18.4补码</h2><blockquote><p>补码：整型以补码的形式存放</p></blockquote><blockquote><p>求一个正整数的二进制：除以2，直至商为0，余数倒序排列。</p></blockquote><blockquote><p>一个负数的补码，先求其绝对值的补码，然后该补码所有位取反，所得之数最后加1</p></blockquote><blockquote><p>0的补码，所有位全是0</p></blockquote><blockquote><p>在存放整型存储单元中最左边一位是用来表示符号的。</p></blockquote><h3 id="n进制补码的整数范围" tabindex="-1"><a class="header-anchor" href="#n进制补码的整数范围" aria-hidden="true">#</a> n进制补码的整数范围</h3><table><thead><tr><th>进制</th><th>整数范围</th></tr></thead><tbody><tr><td>2进制</td><td>-2^(2-1)~2*(2-1)-1</td></tr><tr><td>8进制</td><td>-2^(8-1)~2*(8-1)-1</td></tr><tr><td>16进制</td><td>-2^(15-1)~2*(15-1)-1</td></tr><tr><td>n进制</td><td>-2^(n-1)~2*(n-1)-1</td></tr></tbody></table><blockquote><p>只有整型(包括字符型)数据可以加<code>signed</code>或<code>uusigned</code>修饰符，实数型不能加，对无符号整型数据用<code>%u</code>格式输出</p></blockquote><h3 id="整型数据常见的存储空间和值的范围" tabindex="-1"><a class="header-anchor" href="#整型数据常见的存储空间和值的范围" aria-hidden="true">#</a> 整型数据常见的存储空间和值的范围</h3><table><thead><th>字节数</th><th>类型</th><th>有符号的取值范围</th></thead><tr><td>2</td><td>short,int</td><td>-2^15~2^15-1(-32768~32767)</td></tr><tr><td>4</td><td>int,long</td><td>-2^31~2^31-1</td></tr><tr><td>8</td><td>long,long</td><td>-2^63~2^63-1</td></tr><thead><th>字节数</th><th>类型</th><th>无符号的取值范围</th></thead><tr><td>2</td><td>unsigned short,unsigned int</td><td>0~2^16-1</td></tr><tr><td>4</td><td>unsigned int,unsigned long</td><td>0~2^32-1</td></tr><tr><td>8</td><td>unsigned long,long</td><td>0~2^64-1</td></tr><tbody></tbody></table>`,17),c=n('<table><thead><th rowspan="2">类型</th><th colspan="3">格式声明</th></thead><thead><th></th><th>十进制</th><th>八进制</th><th>十六进制(标红为printf函数可用)</th></thead><tbody><tr><td>short</td><td>%hd,%hi</td><td>%ho</td><td>%hx,%hX,<span style="color:red;">%#hx,%#hX</span></td></tr><tr><td>int</td><td>%d,%i</td><td>%o</td><td>%x,%X,<span style="color:red;">%#x,%#X</span></td></tr><tr><td>long</td><td>%ld,%li</td><td>%lo</td><td>%lx,%hX,<span style="color:red;">%#lx,%#lX</span></td></tr><tr><td>long long</td><td>%lld,%lli</td><td>%llo</td><td>%llx,%llX,<span style="color:red;">%#llx,%#llX</span></td></tr><tr><td>unsigned short</td><td>%hu</td><td>%ho</td><td>%hx,%hX,<span style="color:red;">%#hx,%#hX</span></td></tr><tr><td>unsigned int</td><td>%u</td><td>%o</td><td>%x,%X,<span style="color:red;">%#x,%#X</span></td></tr><tr><td>unsigned long</td><td>%lu</td><td>%lo</td><td>%lx,%lX,<span style="color:red;">%#lx,%#lX</span></td></tr><tr><td>unsigned long long</td><td>%llu</td><td>%llo</td><td>%llx,%llX,<span style="color:red;">%#llx,%#llX</span></td></tr></tbody></table>',1),l=n(`<table><thead><th>类型</th><th>常量末尾所加符号(建议都大写)</th></thead><tbody><tr><td>short</td><td rowspan="3">NONE</td></tr><tr><td>unsigned short</td></tr><tr><td>int</td></tr><tr><td>unsigned int</td><td>U,u</td></tr><tr><td>long</td><td>L,l</td></tr><tr><td>unsigned long</td><td>UL,ul,Ul,uL</td></tr><tr><td>long long</td><td>LL,ll,Ll,lL</td></tr><tr><td>unsigned long long</td><td>ULL,ull,Ull,UlL,uLL,uLl,ulL,</td></tr></tbody></table><h2 id="_18-5整型数据类型转换" tabindex="-1"><a class="header-anchor" href="#_18-5整型数据类型转换" aria-hidden="true">#</a> 18.5整型数据类型转换</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token comment">//1.定义整型——带符号整型 signed和int可以省略</span>
	<span class="token keyword">short</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> b <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">long</span> c <span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>
	<span class="token keyword">long</span> <span class="token keyword">long</span> d <span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>     <span class="token comment">//可能会报错</span>


	<span class="token comment">//2.定义整型——无符号类型 int可以省略</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">short</span> e <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> f <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> g <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	
	<span class="token comment">//3.求一个数据类型或者数值所占的字节符——使用sizeof运算符，注意它不是函数</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d,%d,%d\\n&quot;</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//4.整型数据输出10进制数，所使用的格式声明</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%hd,%d,%ld\\n&quot;</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment">//等价于printf(&quot;%hi,%i,%li&quot;,a,b,c);</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%hu,%u,%lu\\n&quot;</span><span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">,</span>g<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//5.整型数据输出8进制或16进制数，所使用的格式声明</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%o,%x,%X,%#x,%#X\\n&quot;</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//6.scanf函数中不可以使用带&quot;#&quot;的格式字符</span>

<span class="token comment">//	scanf(&quot;%#x&quot;,&amp;b);     error 报错</span>

	<span class="token comment">//7.隐式数据类型转换——长赋短，截断</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">short</span> us <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%hu,m%hd\\n&quot;</span><span class="token punctuation">,</span>us<span class="token punctuation">,</span>us<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//8.隐式数据类型转换——”无符号“赋长，先把&quot;短的&quot;全部复制到&quot;长的&quot;低几位，高几位填0</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> ui <span class="token operator">=</span>us<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%u\\n,ui&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//9.隐式数据类型转换——带符短赋给长，先把”短的“内容复制到&quot;长的&quot;低几位，如果&quot;短的&quot;是自然数，&quot;长的&quot;高几位填0，如果&quot;短的&quot;是负数，&quot;长的&quot;高几位填1</span>
	<span class="token keyword">short</span> ss <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	ui<span class="token operator">=</span>ss<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%u\\n&quot;</span><span class="token punctuation">,</span>ui<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	ss<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	ui<span class="token operator">=</span>ss<span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%u\\n&quot;</span><span class="token punctuation">,</span>ui<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//10.隐式数据类型转换——等长，则保留原有补码</span>
	ui<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%u\\n&quot;</span><span class="token punctuation">,</span>ui<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//11.整型常量——显示数据类型转换</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%u,%ld,%lu\\n&quot;</span><span class="token punctuation">,</span><span class="token number">1U</span><span class="token punctuation">,</span><span class="token number">1L</span><span class="token punctuation">,</span><span class="token number">1UL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">//12.整型数据的强制数据类型转换——(数据类型)该处的括号为强制类型转换符，是一个单目运算符</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%hu,%d\\n&quot;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ui<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function i(d,u){return t(),e("div",null,[o,s(" ### printf与scanf函数不同进制格式声明 "),c,s(" ### 整型常量的类型转换 "),l])}const k=a(p,[["render",i],["__file","order-1.html.vue"]]);export{k as default};
